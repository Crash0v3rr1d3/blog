---
import type { CollectionEntry } from "astro:content";
import { getEntry, render } from "astro:content";
import { getCollection } from "astro:content";
import LayoutWriteupsPost from "@/layouts/LayoutWriteupsPost.astro";
import { Image } from "astro:assets";
import Breadcrumbs from "@/components/Breadcrumbs.astro";
import readingTime from "reading-time";
import { formatDate } from "@/lib/utils";
import { Icon } from "astro-icon/components";
import { Separator } from "@/components/react/ui/separator";
import { badgeVariants } from "@/components/react/ui/badge";
import PostNavigation from "@/components/PostNavigation.astro";
import TableOfContents from "@/components/TableOfContents.astro";
import { Button } from '@/components/react/ui/button'

export const prerender = true;
type Writeup = CollectionEntry<"writeups">;
export async function getStaticPaths() {
  return (await getCollection("writeups", ({ data }) => !data.draft)).map(
    ({ id }) => ({
      params: { id: id as string },
    }),
  );
}

function getAdjacentWriteups(currentId: string, writeupList: Writeup[]) {
  const index = writeupList.findIndex((writeup) => writeup.id === currentId);
  return {
    prev: index > 0 ? writeupList[index - 1] : null,
    next:
      index >= 0 && index < writeupList.length - 1
        ? writeupList[index + 1]
        : null,
  };
}

const { id } = Astro.params;
const allWriteups = await getCollection("writeups");

if (!id) {
  throw new Error("id is missing");
}

const entry = await getEntry("writeups", id);

if (!entry) {
  return Astro.redirect("/404");
}

const isSubpost = !!entry.data.tableOfContents;
const currentEntryId = Astro.params.id;

// Get all subposts
const visibleWriteups = allWriteups.filter((post) => !entry.data.draft);
const stripCodeBlocks = (text: string) => text.replace(/```[\s\S]*?```/g, "");
const totalBody = [entry.body!].map(stripCodeBlocks).join("");
const readTime = readingTime(totalBody);
const { prev: prevPost, next: nextPost } = getAdjacentWriteups(
  currentEntryId,
  visibleWriteups,
);
const { Content, headings } = await render(entry);
---

<LayoutWriteupsPost
  url={`writeups/${entry.id}`}
  minutesRead={readTime.text}
  pubDate={entry.data.pubDate!}
  title={`${entry.data.title} | Anh`}
  description={entry.data.description!}
>
  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(768px,100%)_minmax(0px,1fr)] gap-y-6 px-4"
  >
    <Breadcrumbs
      items={[
        { href: "/writeups", label: "Writeups", icon: "lucide:archive" },
        ...(isSubpost
          ? [
              {
                label: entry.data.title.split(": ")[1] ?? entry.data.title,
                icon: "lucide:pilcrow",
              },
            ]
          : [{ label: entry.data.title, icon: "lucide:file-text" }]),
      ]}
      class="col-start-2"
    />
    <div class="col-span-full mx-auto w-full max-w-[1000px]">
      {
        entry.data.titleImage && (
          <Image
            src={entry.data.titleImage}
            alt={entry.data.title}
            width={1200}
            height={630}
            class="rounded-xl object-cover"
          />
        )
      }
    </div>
    <section class="col-start-2 flex flex-col gap-y-6">
      {
        !isSubpost && (
          <div class="flex flex-col gap-y-4 text-center">
            <h1 class="text-pretty text-3xl font-bold tracking-tight sm:text-4xl">
              {entry.data.title}
            </h1>

            <div class="flex flex-wrap items-center justify-center gap-2 text-sm text-muted-foreground">
                  <div class="flex items-center gap-x-2">
                      <div class="flex items-center gap-x-1.5">
                        <Image
                          src={"/static/heckintosh-avatar.webp"}
                          alt="heckintosh"
                          width={39}
                          height={39}
                          class="rounded-full"
                        />
                        <span class="text-foreground">{entry.data.author}</span>
                      </div>
                  </div>
                <Separator
                  orientation="vertical"
                  className="h-4"
                />
              <div class="flex items-center gap-2">
                <span>{formatDate(entry.data.pubDate)}</span>
                <Separator orientation="vertical" className="h-4" />
                <span>{readTime.text}</span>
              </div>
            </div>
            <div class="flex flex-wrap justify-center gap-2">
              {entry.data.tags?.length ? (
                entry.data.tags.map((tag: string) => (
                  <a
                    href={`/tags/${tag}`}
                    class={badgeVariants({ variant: "secondary" })}
                  >
                    <Icon name="lucide:hash" class="size-3 -translate-x-0.5" />
                    {tag}
                  </a>
                ))
              ) : (
                <span class="text-sm text-muted-foreground">
                  No tags available
                </span>
              )}
            </div>
          </div>
        )
      }
      <PostNavigation prevPost={prevPost} nextPost={nextPost} />
    </section>

    {headings.length > 0 && <TableOfContents headings={headings} />}
    <article class="overflow-auto [&>:first-child>*]:mt-0 prose col-start-2 max-w-none">
      <Content />
    </article>
   

    <PostNavigation prevPost={prevPost} nextPost={nextPost} />
  </section>
  <Button
    variant="outline"
    size="icon"
    className="group fixed bottom-8 right-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  <script>
    document.addEventListener("astro:page-load", () => {
      const scrollToTopButton = document.getElementById("scroll-to-top");
      const footer = document.querySelector("footer");

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener("click", () => {
          window.scrollTo({ top: 0, behavior: "smooth" });
        });

        window.addEventListener("scroll", () => {
          const footerRect = footer.getBoundingClientRect();
          const isFooterVisible = footerRect.top <= window.innerHeight;

          scrollToTopButton.classList.toggle(
            "hidden",
            window.scrollY <= 300 || isFooterVisible,
          );
        });
      }
    });
  </script>
</LayoutWriteupsPost>
